class System 

values
  -- Se define una variable pública 'amount' que representa el precio del ticket de la clase Card
  public amount :real = CardNFC`ticketPrice;

types
  -- Se define un tipo de registro público 'Purchase' que representa el pago de un pasaje

public Purchase ::
    fromId : CardNFC`CardId -- Tarjeta de origen
    toId : CardNFC`CardId -- Tarjeta de destino
    amount : real --Precio del pasaje
    idPuchase : token;  -- Id de la transaccion

instance variables
  --Mapa IdCard ==> Objeto Card entre los identificadores de las tarjetas y las tarjetas en sí.
  private CardNFCs: map CardNFC`CardId to CardNFC; 
  
  -- Inicialmente, esta secuencia está vacía. Es una secuencia de pagos.
  private PurchaseHistory: seq of Purchase := [];
  
  -- Se definen tres variables públicas para representar el día, el mes y el año.
  public day : nat1 := 1;
  public month : nat1 := 1;
  public year : nat := 2000; 

-- Se definen dos invariantes para garantizar la consistencia de los datos.
-- Esta invariante asegura que No puede haber discrepancias entre los identificadores 
-- de las tarjetas y los números de las tarjetas de los objetos CardNFC en el mapa. 
-- Esto ayuda a mantener la integridad de los datos en el sistema.
inv forall p in set dom CardNFCs & CardNFCs(p).GetCardNo() p;=  -- Correspomda el id con el objeto
inv day >= 1 and day <= 31 and
month >= 1 and month <= 12 and
(if month in set {4, 6, 9, 11} then day <= 30
else if month = 2 then day <= 29
else day <= 31);

operations
-- Se define un constructor de la clase System.
-- Recibe  un  set de Cads NFC
public System: set of CardNFC ==> System
    System(CardSet) ==
    -- Este constructor inicializa el mapa 'CardNFCs' con el conjunto de tarjetas proporcionado.
    CardNFCs := {p.GetCardNo() |-> p | p in set CardSet} --Id |-> objeto

-- Se define una precondición para el constructor que garantiza que no haya dos tarjetas con el 
-- mismo identificador.
pre forall p,q in set CardSet & p <> q => p.GetCardNo() <> q.GetCardNo(); --R3

-- Se define em metodo 'Transfer' que representa una transferencia de dinero entre dos tarjetas.
public Transfer: CardNFC`CardId * CardNFC`CardId  ==> ()
Transfer(fromId, toId) ==
    -- Esta operación realiza una compra en la tarjeta de origen y recarga la tarjeta 
    -- de destino con la cantidad de dinero especificada.
    --El origen se le hace un debuto
    (CardNFCs(fromId).Purchase();
    --Al destino se le hace un abono
    CardNFCs(toId).Recharge(amount);)

-- Se define una precondición para la operación 'Transfer':
-- 1. que garantiza que las tarjetas de origen y destino existen, 
-- 2. que no son la misma tarjeta 
-- 3. que la tarjeta de origen tiene suficiente saldo.
pre {fromId, toId} subset dom CardNFCs and 
    fromId <> toId and
    CardNFCs(fromId).GetBalance() >= amount; --R8, R9, R6

end System
